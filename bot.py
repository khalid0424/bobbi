import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from config import TOKEN, BITRIX_WEBHOOK_URL, manager_username, BITRIX_FIELDS, courses
import random
bot = telebot.TeleBot(TOKEN)

user_states = {}


def create_courses_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    for course_id, course_info in courses.items():
        row = [
            InlineKeyboardButton(course_info["name"], callback_data=f"course_{course_id}"),
        ]
        keyboard.add(*row)
    return keyboard

def create_payment_method_keyboard(course_id):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí≥ –û–Ω–ª–∞–π–Ω", callback_data=f"payment_online_{course_id}"),
        InlineKeyboardButton("üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"payment_manager_{course_id}"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="back_to_courses")
    )
    return keyboard

def create_tariffs_keyboard(course_id):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for tariff_id, tariff_info in courses[course_id]["tariffs"].items():
        button_text = f"{tariff_info['name']} "
        keyboard.add(InlineKeyboardButton(button_text, callback_data=f"tariff_{course_id}_{tariff_id}"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="back_to_courses"))
    return keyboard

def get_random_manager(course_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –∫—É—Ä—Å"""
    if course_id in courses and "responsible_managers" in courses[course_id]:
        return random.choice(courses[course_id]["responsible_managers"])
    return {"name": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "bitrix_id": "1"} 

@bot.message_handler(commands=["start"])
def start_handler(message):
    referrer = message.text.split(" ")[-1] if " " in message.text else None
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = telebot.types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button_phone)

    user_states[message.from_user.id] = {
        "referrer": referrer,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name if message.from_user.last_name else ""
    }
    
    bot.send_message(
        message.chat.id,
        "üëã –ê—Å—Å–∞–ª–∞–º—É–ê—ä–∞–ª–∫—É–º! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É—Ä—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
        reply_markup=keyboard
    )

@bot.message_handler(content_types=["contact"])
def contact_handler(message):
    user_id = message.from_user.id
    phone = message.contact.phone_number.replace(" ", "")
    if not phone.startswith("+"):
        phone = f"+{phone}"
    
    if user_id not in user_states:
        user_states[user_id] = {
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name if message.from_user.last_name else "",
            "referrer": None
        }
    
    user_states[user_id]["phone"] = phone

    bot.send_message(
        message.chat.id,
        "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç!", 
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )

    bot.send_message(
        message.chat.id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:",
        reply_markup=create_courses_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_courses")
def back_to_courses_callback(call):
    bot.edit_message_text(
        "üìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=create_courses_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
def course_callback(call):
    user_id = call.from_user.id
    course_id = call.data.split("_")[1]
    
    if course_id not in courses:
        bot.answer_callback_query(call.id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        return
        
    course_name = courses[course_id]["name"]
    
    if user_id not in user_states:
        user_states[user_id] = {
            "first_name": call.from_user.first_name,
            "last_name": call.from_user.last_name if call.from_user.last_name else ""
        }
    
    user_states[user_id]["selected_course"] = course_id
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    random_manager = get_random_manager(course_id)
    user_states[user_id]["assigned_manager"] = random_manager
    
    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=create_payment_method_keyboard(course_id)
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("payment_online_"))
def payment_online_callback(call):
    user_id = call.from_user.id
    course_id = call.data.split("_")[2]
    
    if course_id not in courses:
        bot.answer_callback_query(call.id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        return
        
    course_name = courses[course_id]["name"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or "phone" not in user_states[user_id]:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = telebot.types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard.add(button_phone)
        
        bot.send_message(
            call.message.chat.id, 
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=keyboard
        )
        return
    
    try:
        with open(courses[course_id]["image"], 'rb') as photo:
            bot.send_photo(
                call.message.chat.id,
                photo,
                caption=f"üéü –¢–∞—Ä–∏—Ñ—ã –∫—É—Ä—Å–∞ {course_name}:"
            )
    except Exception as e:
        bot.send_message(
            call.message.chat.id,
            f"üéü –¢–∞—Ä–∏—Ñ—ã –∫—É—Ä—Å–∞ {course_name}:"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:",
        reply_markup=create_tariffs_keyboard(course_id)
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("payment_manager_"))
def payment_manager_callback(call):
    user_id = call.from_user.id
    course_id = call.data.split("_")[2]
    
    if course_id not in courses:
        bot.answer_callback_query(call.id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        return
        
    if user_id not in user_states or "phone" not in user_states[user_id]:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = telebot.types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard.add(button_phone)
        
        bot.send_message(
            call.message.chat.id, 
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=keyboard
        )
        return
    
    course_name = courses[course_id]["name"]
    
    if "assigned_manager" not in user_states[user_id]:
        user_states[user_id]["assigned_manager"] = get_random_manager(course_id)
    
    responsible_manager_name = user_states[user_id]["assigned_manager"]["name"]
    
    create_bitrix_deal(user_id, course_id, None, "–ß–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    
    manager_chat_url = f"https://t.me/{manager_username.replace('@', '')}"
    predefined_message = f"–ê—Å—Å–∞–ª–∞–º—É–ê–ª–µ–π–∫—É–º, –≥–æ—Å–ø–æ–¥–∏–Ω {responsible_manager_name}, —è —Ö–æ—Ç–µ–ª –±—ã –ø—Ä–æ–π—Ç–∏ –∏ –∫—É–ø–∏—Ç—å –∫—É—Ä—Å ¬´{course_name}¬ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ..."
    direct_chat_url = f"{manager_chat_url}?start={course_id}&text={requests.utils.quote(predefined_message)}"
    
    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –∫—É—Ä—Å–∞ ¬´{course_name}¬ª.\n"
        f"–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è:"
    )
    
    redirect_keyboard = InlineKeyboardMarkup()
    redirect_keyboard.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=direct_chat_url))
    redirect_keyboard.add(InlineKeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –∑–≤–æ–Ω–æ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"call_request_{course_id}"))
    redirect_keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="back_to_courses"))

    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
        reply_markup=redirect_keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("call_request_"))
def call_request_callback(call):
    user_id = call.from_user.id
    course_id = call.data.split("_")[2]
    
    if course_id not in courses:
        bot.answer_callback_query(call.id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        return
    
    if user_id not in user_states or "phone" not in user_states[user_id]:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = telebot.types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard.add(button_phone)
        
        bot.send_message(
            call.message.chat.id, 
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=keyboard
        )
        return
    
    course_name = courses[course_id]["name"]
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∑–≤–æ–Ω–∫–∞
    create_bitrix_deal(user_id, course_id, None, "–ß–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", call_requested=True)
    
    bot.send_message(
        call.message.chat.id,
        f"üìû –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏.",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="back_to_courses"))
    )
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("tariff_"))
def tariff_callback(call):
    user_id = call.from_user.id
    _, course_id, tariff_id = call.data.split("_")
    
    if course_id not in courses or tariff_id not in courses[course_id]["tariffs"]:
        bot.answer_callback_query(call.id, "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        return
    
    course_name = courses[course_id]["name"]
    tariff_info = courses[course_id]["tariffs"][tariff_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or "phone" not in user_states[user_id]:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = telebot.types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard.add(button_phone)
        
        bot.send_message(
            call.message.chat.id, 
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=keyboard
        )
        return
    
    user_states[user_id]["selected_tariff"] = tariff_id
    
    bot.send_message(
        call.message.chat.id,
        f"üéì –¢–∞—Ä–∏—Ñ: {tariff_info['name']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff_info['price']} —Ä—É–±.\n\n"
        f"{tariff_info['info']}\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    payment_keyboard = InlineKeyboardMarkup(row_width=1)
    payment_keyboard.add(
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω", url=tariff_info["link"]),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="back_to_courses")
    )
    
    bot.send_message(
        call.message.chat.id,
        "‚ÜòÔ∏èüîΩüîΩüîΩüîΩüîΩüîΩ‚ÜôÔ∏è",
        reply_markup=payment_keyboard
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å
    create_bitrix_deal(user_id, course_id, tariff_id, "–û–Ω–ª–∞–π–Ω")

def create_bitrix_deal(user_id, course_id, tariff_id, payment_method, call_requested=False):
    if user_id not in user_states or "phone" not in user_states[user_id]:
        return
        
    course_name = courses[course_id]["name"]
    
    # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
    if "assigned_manager" not in user_states[user_id]:
        user_states[user_id]["assigned_manager"] = get_random_manager(course_id)
    
    responsible_manager_id = user_states[user_id]["assigned_manager"]["bitrix_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    tariff_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
    tariff_price = 0
    if tariff_id and tariff_id in courses[course_id]["tariffs"]:
        tariff_info = courses[course_id]["tariffs"][tariff_id]
        tariff_name = tariff_info["name"]
        tariff_price = int(tariff_info["price"])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referrer = user_states[user_id].get("referrer")
        first_name = user_states[user_id].get("first_name", "")
        last_name = user_states[user_id].get("last_name", "")
        
        user_name = f"{first_name} {last_name}".strip()
        if not user_name:
            user_name = f"User {user_id}"
        
        contact_response = requests.get(
            f"{BITRIX_WEBHOOK_URL}/crm.contact.list", 
            params={"FILTER[PHONE]": user_states[user_id]["phone"]}, 
            timeout=10
        )
        contact_response.raise_for_status()
        contact_data = contact_response.json()

        contact_id = None
        if "result" in contact_data and len(contact_data["result"]) > 0:
            contact_id = contact_data["result"][0]["ID"]
        else:
            contact_create = requests.post(
                f"{BITRIX_WEBHOOK_URL}/crm.contact.add", 
                json={
                    "fields": {
                        "NAME": first_name,
                        "LAST_NAME": last_name,
                        "PHONE": [{"VALUE": user_states[user_id]["phone"], "VALUE_TYPE": "WORK"}],
                    }
                }, 
                timeout=10
            )
            contact_create.raise_for_status()
            contact_id = contact_create.json().get("result")

        
        deal_data = {
            "fields": {
                BITRIX_FIELDS["title"]: f"üõí –ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞ - {course_name}",
                BITRIX_FIELDS["type"]: "GOODS",
                BITRIX_FIELDS["stage"]: "NEW",
                BITRIX_FIELDS["price"]: tariff_price,
                "CONTACT_ID": contact_id,
                BITRIX_FIELDS["course"]: course_name,
                BITRIX_FIELDS["tariff_name"]: tariff_name,
                BITRIX_FIELDS["referral"]: referrer if referrer else "–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞",
                BITRIX_FIELDS.get("payment_method", "UF_CRM_PAYMENT_METHOD"): payment_method,
                "ASSIGNED_BY_ID": responsible_manager_id,
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–≤–æ–Ω–∫–∞
                BITRIX_FIELDS.get("call_requested"): "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É" if call_requested else ""
            }
        }

        response = requests.post(
            f"{BITRIX_WEBHOOK_URL}/crm.deal.add", 
            json=deal_data, 
            timeout=10
        )
        response.raise_for_status()
    except requests.RequestException as e:
        bot.send_message(
            user_id, 
            f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {manager_username}"
        )
    except Exception as e:
        bot.send_message(
            user_id, 
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {manager_username}"
        )

if __name__ == "__main__":
    bot.polling(none_stop=True)